* inventory-d3js-visualization


Using d3.js to visualize solutions to an inventory problem


* Project Summary

This project provides visualizations for the solutions toan inventory dynamic program which features asymmetric information.

* Components
 
The solutions are currently located in a CSV file of the form:

|-----+----+----+-------------------+--------------------------------------+------|
| i   | si | wi |             value | uuid                                 | type |
|-----+----+----+-------------------+--------------------------------------+------|
| 4   |  1 |  1 | 39.99993934398819 | 30427dc0-20ae-48a9-b7ca-85f64f830ff3 | r    |
| ... |    |    |                   |                                      |      |
| ... |    |    |                   |                                      |      |
|-----+----+----+-------------------+--------------------------------------+------|
  
where =type= is one of:

 - =r= centralized retailer   
 - =s= centralized supplier   
 - =d= decentrailized retailer
 - =u= decentrailized supplier.

We can refer to this as =param_data=, since it is the data relevent to an individual parameterization.
For each =uuid=, there exist approximately 4 * =k= * (=wMax=)^2  values, where =wMax= is inferred based on the other parameters, but typically varies between 40 and 100. The 4 comes from 4 problem types.


Additionally, there is a =params.csv= file describing the list of parameterizations


** Acceptable version
   

   |------+------------------------|
   | type | min_good_commit_number |
   |------+------------------------|
   | d    |                     20 |
   | r    |                     10 |
   |------+------------------------|

   If min_good_commit_number < best_run's commit number, re-run for that type.
   
   #+BEGIN_SRC sh
./update-commit-level --type=d # default is latest commit, if running in git repository
./update-commit-level --type=d --commit=20
   #+END_SRC
   

** Data Table

param = (h,p,k,muu,sig,t,m,nstep_s,nstep_w)

|------+------+-------+------+-------+------+------+------+---------+---------+------------+------------------------|
| type |    h |     p |    k |   muu |  sig |    t |    m | nstep_s | nstep_w | md5(param) | key(md5(param + type)) |
|------+------+-------+------+-------+------+------+------+---------+---------+------------+------------------------|
| d    | 1.00 | 99.00 | 4.00 | 10.00 | 3.30 | 1.00 | 2.00 |       1 |       1 | 8c58ed71-  |                        |
| d    | 1.00 | 39.00 | 4.00 | 10.00 | 3.30 | 1.00 | 2.00 |       1 |       1 | 8d4b4e84-  |                        |
| d    | 1.00 | 19.00 | 4.00 | 10.00 | 3.30 | 1.00 | 2.00 |       1 |       1 | 1aa158a1-  |                        |
| d    | 1.00 |  9.00 | 4.00 | 10.00 | 3.30 | 1.00 | 2.00 |       1 |       1 | f0ffee49-  |                        |
| d    | 1.00 |  4.00 | 4.00 | 10.00 | 3.30 | 1.00 | 2.00 |       1 |       1 | 04d8d442-  |                        |
| r    | 1.00 | 99.00 | 4.00 | 10.00 | 3.30 | 1.00 | 2.00 |       1 |       1 | 8c58ed71-  |                        |
|      |      |       |      |       |      |      |      |         |         |            |                        |
|      |      |       |      |       |      |      |      |         |         |            |                        |
|------+------+-------+------+-------+------+------+------+---------+---------+------------+------------------------|


 - for all known params, run new model
 - for a spreadsheet of params, do md5, add new tasks
 - figure out the data management commands


 #+BEGIN_SRC sh
./add-data --file="more_params.csv" 
   ### report collisions with current 
   ### report unparsable lines
 #+end_SRC sh


** Runs Table
   - When a program terminates, it inserts/updates to best runs based on key=(md5(param + type))
   - Similar schema as log

   - Continuously monitor data && min_good_commit_number, launch jobs as necessary



** Log Table

   This table is append only, and keeps track of all the simulations that have happened at this point.
   Logs only gets written as tasks {start,complete,fail}.
   The idea is that I should be able to do "add tasks to sqs where params from (select all from runs where commit_number < X)".
   Status = {in_progress, success_fail}

|------------+------------+-------------------+-------------+---------------+--------|
| key(param) | model-type | uuid (unique key) | commit hash | commit number | status |
|------------+------------+-------------------+-------------+---------------+--------|
| 8c58ed71-  | r          |                   | abc123      |     2014-0412 |        |
| 8d4b4e84-  | r          |                   | abc123      |               |        |
| 1aa158a1-  | r          |                   | abc123      |               |        |
| f0ffee49-  | r          |                   |             |               |        |
| 04d8d442-  | r          |                   |             |               |        |
| 8c58ed71-  | d          |                   | abc123      |     2014-0412 |        |
| 8d4b4e84-  | d          |                   | abc123      |               |        |
| 1aa158a1-  | d          |                   | abc123      |               |        |
| f0ffee49-  | d          |                   |             |               |        |
| 04d8d442-  | d          |                   |             |               |        |
|            |            |                   |             |               |        |
|            |            |                   |             |               |        |
|            |            |                   |             |               |        |
|            |            |                   |             |               |        |
|------------+------------+-------------------+-------------+---------------+--------|

** Launcher script

   - while SQS queue not empty
     - get task
     - construct command line args
     - run simulation
     - s3cmd put
     - delete item from queue
     - some kind of failure signal






** Data structure

   - nodes (array)
     - uuid : string
     - param : value (double)
     - points (array)
       - "si" :: Int, matrix x value
       - "wi" :: Int, matrix y value
       - "cost" :: Double, matrix z value
       - "k" :: Int, the iteration number
       - "type" :: the type of solution
     - has_d : Boolean, this is redundant with types, but will make selctions faster.
		This indicates if the data is available for the specified type.



	

   The idea is that each "node" represents a solved parameterization of the model.
   Each node is uniquely identified by a uuid, which is unique to the parameterization. 
   Within the uuid, the parameters are listed, e.g. ="theta":0.5=.
   For each uuid, there are sets of arrays called points. 
   Each point has =si=, =wi=, =cost=, =k=, and =type= wher =type= comes from the set described earlier.



#+BEGIN_SRC js
  { "nodes":[
      {"uuid":"8c58ed71-3981-4396-9445-fd0f8b318ea4",
       "theta":0.5,
       "points": [
  
           { "si":1, "wi":1, "cost":0.791893923422322,  "k":1, "type":"d" },
           { "si":1, "wi":2, "cost":0.160935510415584,  "k":1, "type":"d" },
           { "si":1, "wi":3, "cost":0.364172770408913,  "k":1, "type":"d" },
           { "si":1, "wi":4, "cost":0.552027055993676,  "k":1, "type":"d" },
           { "si":1, "wi":5, "cost":0.142493781866506,  "k":1, "type":"d" },
           { "si":2, "wi":1, "cost":0.0875061969272792, "k":1, "type":"d" },
           { "si":2, "wi":2, "cost":0.919137241318822,  "k":1, "type":"d" },
           { "si":2, "wi":3, "cost":0.994913357542828,  "k":1, "type":"d" },
           { "si":2, "wi":4, "cost":0.722297312226146,  "k":1, "type":"d" },
           { "si":2, "wi":5, "cost":0.894296591868624,  "k":1, "type":"d" },
           { "si":3, "wi":1, "cost":0.156067196279764,  "k":1, "type":"d" },
           { "si":3, "wi":2, "cost":0.481373419286683,  "k":1, "type":"d" },
           { "si":3, "wi":3, "cost":0.605798073811457,  "k":1, "type":"d" },
           { "si":3, "wi":4, "cost":0.755949556129053,  "k":1, "type":"d" },
           { "si":3, "wi":5, "cost":0.446277996292338,  "k":1, "type":"d" },
           { "si":4, "wi":1, "cost":0.923983251210302,  "k":1, "type":"d" },
           { "si":4, "wi":2, "cost":0.999228179221973,  "k":1, "type":"d" },
           { "si":4, "wi":3, "cost":0.358962587779388,  "k":1, "type":"d" },
           { "si":4, "wi":4, "cost":0.525295131374151,  "k":1, "type":"d" },
           { "si":4, "wi":5, "cost":0.0718211741186678, "k":1, "type":"d" },
           { "si":5, "wi":1, "cost":0.0522713393438607, "k":1, "type":"d" },
           { "si":5, "wi":2, "cost":0.530499339103699,  "k":1, "type":"d" },
           { "si":5, "wi":3, "cost":0.336861049057916,  "k":1, "type":"d" },
           { "si":5, "wi":4, "cost":0.9441224897746,    "k":1, "type":"d" },
           { "si":5, "wi":5, "cost":0.0678710869979113, "k":1, "type":"d" }
       ],
       "has_d": true, 
       "has_p": false
      }
  ]
  }
  
#+END_SRC



** Web service
   - upload CSV -> run simulations

* Roadmap 

  - [ ] Visualize a heatmap for a single instance of the problem
  - [ ] Create a 2 x K grid of heatmaps
  - [ ] Allow it to change over time
    - [ ] Animation play and pause buttons
  - [ ] Read =params.csv= and create [[https://github.com/turban/d3.slider/blob/master/d3.slider.js][sliders]]
  - [ ] Figure out a way to query the data dynamically
    - [ ] Visualize loading data progress
  - [ ] Add notes to the visualization
  - [ ] Web service to run the solver on additional parameters




* Interface Mockup


[[file:mockup1.png]]


* Reference d3.js instances
  - [[http://bost.ocks.org/mike/miserables][Les Mierables Character Relations]]
    - Example of color matrix
    - Example of using JSON
  - [[http://www.pewresearch.org/next-america/][American demographics visualizations]]
    - Graph changing over time with animation controls

** Other useful links
   - [[http://www.youtube.com/watch?v%3D2S1AbEWX85o][JSON + d3.js tutorial]]
   - [[https://www.dashingd3js.com/d3-examples/1-d3-and-javascript-working-with-json][JSON + d3.js tutorial 2]]
   - [[http://json.parser.online.fr/][Online JSON parser]]
